// <auto-generated />
using System;
using Acg.University.DAL.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Acg.University.DAL.SqlServer.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    [Migration("20221010063336_completando")]
    partial class completando
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Acg.University.DAL.Entidades.Administrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Alumno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("Alumnos");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Asignatura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.ToTable("Asignaturas");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.CuantosTelPersona", b =>
                {
                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("nTel")
                        .HasColumnType("int");

                    b.ToView("View_TelefonosPersonas");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TitulacionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TitulacionId");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.CursoAcademico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CursosAcademicos");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Departamentos");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Examen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.Property<int>("CursoAcademicoId")
                        .HasColumnType("int");

                    b.Property<int>("PreguntasMax")
                        .HasColumnType("int");

                    b.Property<int>("PreguntasMin")
                        .HasColumnType("int");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.HasIndex("CursoAcademicoId");

                    b.HasIndex("ProfesorId");

                    b.ToTable("Examenes");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.ExamenAlumno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<int>("ExamenId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId");

                    b.ToTable("ExamenesAlumnos");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Investigador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("Investigadores");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Matricula", b =>
                {
                    b.Property<int>("CursoAcademicoId")
                        .HasColumnType("int");

                    b.Property<int>("AlumnoId")
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.HasKey("CursoAcademicoId", "AlumnoId", "AsignaturaId");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("AsignaturaId");

                    b.ToTable("Matriculas", (string)null);
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CodPostal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DNI")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Poblacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.PlantillaExamen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AsignaturaId");

                    b.HasIndex("DepartamentoId");

                    b.HasIndex("ProfesorId");

                    b.ToTable("PlantillasExamen");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.PreguntaPlantilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PlantillaExamenId")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlantillaExamenId");

                    b.ToTable("PreguntasPlantilla");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Profesor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId")
                        .IsUnique();

                    b.ToTable("Profesores");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.ProfesorAsignatura", b =>
                {
                    b.Property<int>("CursoAcademicoId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.Property<int>("AsignaturaId")
                        .HasColumnType("int");

                    b.HasKey("CursoAcademicoId", "ProfesorId", "AsignaturaId");

                    b.HasIndex("AsignaturaId");

                    b.HasIndex("ProfesorId");

                    b.ToTable("ProfesoresAsignaturas", (string)null);
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Proyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.RespuestaExamen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Correcta")
                        .HasColumnType("bit");

                    b.Property<int>("ExamenAlumnoId")
                        .HasColumnType("int");

                    b.Property<int>("IdPregunta")
                        .HasColumnType("int");

                    b.Property<int>("Respuesta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExamenAlumnoId");

                    b.ToTable("RespuestasExamen");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.RespuestaPlantilla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Correcta")
                        .HasColumnType("bit");

                    b.Property<int>("PreguntaPlantillaId")
                        .HasColumnType("int");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PreguntaPlantillaId");

                    b.ToTable("RespuestasPlantilla");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Alumno"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Invest"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Profesor"
                        });
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.TelefonoPersona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("TelefonoPersona");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Titulacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Titulaciones");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Passwd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("InvestigadorProyecto", b =>
                {
                    b.Property<int>("InvestigadoresId")
                        .HasColumnType("int");

                    b.Property<int>("ProyectosId")
                        .HasColumnType("int");

                    b.HasKey("InvestigadoresId", "ProyectosId");

                    b.HasIndex("ProyectosId");

                    b.ToTable("InvestigadorProyecto");
                });

            modelBuilder.Entity("RolUsuario", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsuariosId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("RolUsuario");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Administrador", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Alumno", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Asignatura", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Curso", "Curso")
                        .WithMany("Asignaturas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Curso", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Titulacion", "Titulacion")
                        .WithMany("Cursos")
                        .HasForeignKey("TitulacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Titulacion");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Examen", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Asignatura", "Asignatura")
                        .WithMany()
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acg.University.DAL.Entidades.CursoAcademico", "Curso")
                        .WithMany("Examenes")
                        .HasForeignKey("CursoAcademicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acg.University.DAL.Entidades.Profesor", "Profesor")
                        .WithMany()
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");

                    b.Navigation("Curso");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.ExamenAlumno", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alumno");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Investigador", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Matricula", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Alumno", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acg.University.DAL.Entidades.Asignatura", "Asignatura")
                        .WithMany()
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acg.University.DAL.Entidades.CursoAcademico", "Curso")
                        .WithMany("Matricula")
                        .HasForeignKey("CursoAcademicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alumno");

                    b.Navigation("Asignatura");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Persona", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.PlantillaExamen", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Asignatura", "Asignatura")
                        .WithMany()
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acg.University.DAL.Entidades.Departamento", "Departamento")
                        .WithMany()
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acg.University.DAL.Entidades.Profesor", "Profesor")
                        .WithMany()
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");

                    b.Navigation("Departamento");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.PreguntaPlantilla", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.PlantillaExamen", null)
                        .WithMany("Preguntas")
                        .HasForeignKey("PlantillaExamenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Profesor", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Persona", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.ProfesorAsignatura", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Asignatura", "Asignatura")
                        .WithMany()
                        .HasForeignKey("AsignaturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acg.University.DAL.Entidades.CursoAcademico", null)
                        .WithMany("ProfesoresAsignaturas")
                        .HasForeignKey("CursoAcademicoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acg.University.DAL.Entidades.Profesor", "Profesor")
                        .WithMany()
                        .HasForeignKey("ProfesorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asignatura");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.RespuestaExamen", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.ExamenAlumno", null)
                        .WithMany("Respuestas")
                        .HasForeignKey("ExamenAlumnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.RespuestaPlantilla", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.PreguntaPlantilla", null)
                        .WithMany("Respuestas")
                        .HasForeignKey("PreguntaPlantillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.TelefonoPersona", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Persona", "Persona")
                        .WithMany("Telefonos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("InvestigadorProyecto", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Investigador", null)
                        .WithMany()
                        .HasForeignKey("InvestigadoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acg.University.DAL.Entidades.Proyecto", null)
                        .WithMany()
                        .HasForeignKey("ProyectosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RolUsuario", b =>
                {
                    b.HasOne("Acg.University.DAL.Entidades.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acg.University.DAL.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Curso", b =>
                {
                    b.Navigation("Asignaturas");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.CursoAcademico", b =>
                {
                    b.Navigation("Examenes");

                    b.Navigation("Matricula");

                    b.Navigation("ProfesoresAsignaturas");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.ExamenAlumno", b =>
                {
                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Persona", b =>
                {
                    b.Navigation("Telefonos");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.PlantillaExamen", b =>
                {
                    b.Navigation("Preguntas");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.PreguntaPlantilla", b =>
                {
                    b.Navigation("Respuestas");
                });

            modelBuilder.Entity("Acg.University.DAL.Entidades.Titulacion", b =>
                {
                    b.Navigation("Cursos");
                });
#pragma warning restore 612, 618
        }
    }
}
